name: Build & Release

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:

jobs:
  build:
    name: Build (${{ matrix.os }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}

    # Define the matrix for different operating systems and architecture
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-20.04, windows-latest]
        arch: [x64]

    steps:
      - uses: actions/checkout@v3

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      # Get yarn cache directory path
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      # Cache yarn dependencies (except for macOS)
      - uses: actions/cache@v3
        if: matrix.os != 'macOS-latest'
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install project dependencies with yarn
      - name: Install
        run: yarn

      # Run the 'make' command for tagged releases
      - name: Make
        if: startsWith(github.ref, 'refs/tags/')
        run: yarn make --arch=${{ matrix.arch }}

      # Release artifacts using softprops/action-gh-release
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          draft: true
          files: |
            out/**/*.deb
            out/**/*.dmg
            out/**/*setup*.exe
            out/**/*.zip
